Transform: AWS::Serverless-2016-10-31

Parameters:
  IsDev:
    Type: String
    Default: "true"
    AllowedValues:
      - "true"
      - "false"
  DomainName:
    Type: String
  AcmCertificateArn:
    Type: String
  GoogleClientId:
    Type: String
  GoogleClientSecret:
    Type: String

Conditions:
  IsDev: !Equals [!Ref IsDev, "true"]
  IsProd: !Equals [!Ref IsDev, "false"]

Resources:
  WebsiteCloudFront:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        DefaultRootObject: "index.html"
        Enabled: true
        Origins:
          - Id: WebsiteOrigin
            DomainName: !GetAtt WebsiteBucket.RegionalDomainName
            S3OriginConfig:
              OriginAccessIdentity:
                !Join
                  - ""
                  - - "origin-access-identity/cloudfront/"
                    - !Ref CloudFrontOriginAccessIdentity
        DefaultCacheBehavior:
          TargetOriginId: WebsiteOrigin
          ViewerProtocolPolicy: redirect-to-https
          CachePolicyId: !Ref CloudFrontCachePolicy
        HttpVersion: http2
        Aliases: 
          - !If [IsDev, !Ref AWS::NoValue, !Ref DomainName]
        ViewerCertificate:
          !If
            - IsDev
            - !Ref AWS::NoValue
            - AcmCertificateArn: !Ref AcmCertificateArn
              MinimumProtocolVersion: TLSv1.2_2021
              SslSupportMethod: sni-only
        Comment: !Ref AWS::StackName
        CustomErrorResponses:
          - ErrorCode: 403
            ResponsePagePath: "/index.html"
            ResponseCode: 403

  CloudFrontCachePolicy:
    Type: AWS::CloudFront::CachePolicy
    Properties:
      CachePolicyConfig:
        DefaultTTL: !If [IsDev, 0, 86400]
        MaxTTL: !If [IsDev, 1, 31536000]
        MinTTL: 0
        Name: !Ref AWS::StackName
        ParametersInCacheKeyAndForwardedToOrigin:
          CookiesConfig:
            CookieBehavior: none
          EnableAcceptEncodingBrotli: !If [IsDev, false, true]
          EnableAcceptEncodingGzip: !If [IsDev, false, true]
          HeadersConfig:
            HeaderBehavior: none
          QueryStringsConfig:
            QueryStringBehavior: none

  CloudFrontOriginAccessIdentity:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: "CloudFront Origin Access Identity"

  WebsiteBucket:
    Type: AWS::S3::Bucket
    Properties:
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  WebsiteBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref WebsiteBucket
      PolicyDocument:
        Statement:
          - Effect: Allow
            Action: s3:GetObject
            Resource: !Join ["", [!GetAtt WebsiteBucket.Arn, "/*"]]
            Principal:
              AWS:
                !Join
                  - " "
                  - - "arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity"
                    - !Ref CloudFrontOriginAccessIdentity

  WebsiteUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UsernameAttributes:
        - email
      Schema:
        - AttributeDataType: String
          Name: given_name
          Required: true
          Mutable: true
        - AttributeDataType: String
          Name: family_name
          Required: true
          Mutable: true
        - AttributeDataType: String
          Name: email
          Required: true
          Mutable: true

  WebsiteUserPoolIdentityProviderGoogle:
    Type: AWS::Cognito::UserPoolIdentityProvider
    Properties:
      UserPoolId: !Ref WebsiteUserPool
      ProviderType: Google
      ProviderName: Google
      ProviderDetails:
        client_id: !Ref GoogleClientId
        client_secret: !Ref GoogleClientSecret
        authorize_scopes: "profile email openid"
      AttributeMapping:
        email: email
        email_verified: email_verified
        given_name: given_name
        family_name: family_name
  
  WebsiteUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref WebsiteUserPool
      GenerateSecret: true
      AllowedOAuthFlows: 
        - code
      AllowedOAuthFlowsUserPoolClient: true
      AllowedOAuthScopes:
        - phone
        - email
        - openid
        - profile
        - aws.cognito.signin.user.admin
      CallbackURLs:
        - !Join ["", ["https://", !If [IsDev, !GetAtt WebsiteCloudFront.DomainName, !Ref DomainName], "/"]]
      LogoutURLs:
        - !Join ["", ["https://", !If [IsDev, !GetAtt WebsiteCloudFront.DomainName, !Ref DomainName], "/"]]
      SupportedIdentityProviders:
        - "Google"

  WebsiteUserPoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties:
      UserPoolId: !Ref WebsiteUserPool
      Domain: !If [IsDev, !Ref AWS::StackName, !Join ["", ["auth.", !Ref DomainName]]]
      CustomDomainConfig:
        !If
          - "IsDev"
          - !Ref AWS::NoValue
          - CertificateArn: !Ref AcmCertificateArn